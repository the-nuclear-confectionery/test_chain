#!/usr/bin/bash

git submodule update --init --recursive
git submodule update 

export PREFIX=${CONDA_PREFIX}
export WORKDIR=${PWD}
export CABANASRC=${CONDA_PREFIX}/cabana
export KOKKOSSRC=${CONDA_PREFIX}/kokkos

conda env config vars set PREFIX=${PREFIX} WORKDIR=${WORKDIR} CPATH=${PREFIX}/include CABANASRC=${CABANASRC} KOKKOSSRC=${KOKKOSSRC}

cd ${PREFIX}

git clone https://gitlab.cern.ch/hepmc/HepMC3.git
cd HepMC3
git checkout 7c7f4e5b1ffa5702787ca6c40ccc26f356bedb75
cd ..
mkdir hepmc3-build          
cd hepmc3-build

cmake -DHEPMC3_ENABLE_ROOTIO=ON -DROOT_DIR=${ROOTSYS} -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_POLICY_VERSION_MINIMUM=3.5  ../HepMC3
make -j8 install

cd $PREFIX

wget https://pythia.org/download/pythia83/pythia8310.tgz
tar xf pythia8310.tgz && rm pythia8310.tgz
cd pythia8310
./configure --prefix=${PREFIX} --with-hepmc3=${PREFIX}/HepMC3 --cxx-common='-std=c++17 -march=native -O3 -fPIC -pthread'
make -j8 install

git clone https://github.com/kokkos/kokkos.git $KOKKOSSRC
cd $KOKKOSSRC
git checkout 4.1.00
mkdir -p $KOKKOSSRC/build && cd $KOKKOSSRC/build

cmake -DCMAKE_BUILD_TYPE="Release" \
      -DCMAKE_INSTALL_PREFIX=$PREFIX \
      -DCMAKE_CXX_COMPILER=g++ \
      -DCMAKE_CXX_STANDARD=17 \
      -DCMAKE_CXX_EXTENSIONS=Off \
      -DKokkos_ENABLE_COMPILER_WARNINGS=ON \
      -DKokkos_ENABLE_CUDA=Off \
      -DKokkos_ENABLE_CUDA_LAMBDA=Off \
      -DKokkos_ENABLE_OPENMP=On \
      -DKokkos_ENABLE_SERIAL=On \
      -DKokkos_ENABLE_TESTS=Off \
      -DKokkos_ARCH_AMPERE80=Off $KOKKOSSRC
cmake --build . --target install -j

git clone https://github.com/ECP-copa/Cabana.git $CABANASRC
cd $CABANASRC
git checkout 2b642f8dbba760e2008f8b81a4196e6adf100f42
mkdir -p $CABANASRC/build && cd $CABANASRC/build
    cmake -DCMAKE_BUILD_TYPE="Release" \
          -DCMAKE_CXX_STANDARD=17 \
          -DCMAKE_PREFIX_PATH=$CABANASRC \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DCMAKE_CXX_COMPILER=g++\
          -DCabana_REQUIRE_CUDA=OFF \
          -DCabana_ENABLE_TESTING=OFF \
          -DCabana_ENABLE_EXAMPLES=OFF $CABANASRC
cmake --build . --target install -j




export EIGEN3_ROOT="${PREFIX}/eigen3"          
export PYTHIA8DIR="${PREFIX}/pythia8310"
export PYTHIA8_ROOT_DIR="${PREFIX}/pythia8310"
export HEPMC_DIR=${PREFIX}


#install ampt 
cd $WORKDIR/models
wget https://myweb.ecu.edu/linz/ampt/ampt-v1.26t9b-v2.26t9b.zip
unzip ampt-v1.26t9b-v2.26t9b.zip
mv Ampt-v1.26t9b-v2.26t9b AMPT
rm -rf ampt-v1.26t9b-v2.26t9b.zip
cd AMPT
sed -i 's/f77/gfortran/' Makefile
make FC=gfortran
sed -i '34 s/0/3/' input.ampt #config to write all files necessary to hydro
sed -i '28 s/0/11/' input.ampt 


cd $WORKDIR/models/trento
mkdir build && cd build
cmake .. -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_POLICY_VERSION_MINIMUM=3.5
make -j8 install

cd $WORKDIR/models/ICCING
make -j8

cd $WORKDIR/models/AMPTGenesis
mkdir build && cd build
cmake ..
make -j8

#copy freestream to wrapper
mkdir -p $WORKDIR/wrapper/external_packages/
cp -rf $WORKDIR/models/freestream/freestream.py $WORKDIR/wrapper/external_packages/ 


cd $WORKDIR/models/CCAKE

mkdir -p EoS/Houston && \
wget -O EoS/Houston/thermo.dat https://zenodo.org/record/6829115/files/thermo.dat?download=1 && \
wget -O EoS/Houston/thermo.h5 https://zenodo.org/record/6829115/files/thermo.h5?download=1

mkdir build && cd build
#copy EoS to build directory
cp -r EoS $WORKDIR/models/CCAKE/build
cmake ..
make -j8


cd $WORKDIR/models/iS3D
mkdir build && cd build
cmake ..
make -j8 install

cd $WORKDIR/models/BQSSampler
mkdir build && cd build
cmake .. 
make -j8 

cd $WORKDIR/models/analytical_cooperfrye
make clean
make -j

cd $WORKDIR/models/decays
mkdir build && cd build
cmake ..
make -j8

#5) Setup environment variables
export SMASH_DIR="${WORKDIR}/models/smash/"

conda env config vars set SMASH_DIR=${SMASH_DIR} EIGEN3_ROOT=${EIGEN3_ROOT} PYTHIA8DIR=${PYTHIA8DIR} PYTHIA8_ROOT_DIR=${PYTHIA8_ROOT_DIR} HEPMC_DIR=${PREFIX}

cd $WORKDIR
cd models/smash
mkdir build
cd build
cmake .. -DPythia_CONFIG_EXECUTABLE=$PREFIX/pythia8310/bin/pythia8-config -DCMAKE_INSTALL_PREFIX=$PREFIX
make -j8
make install

#build qvector writter
cd $WORKDIR/models/qvector_writter
mkdir build && cd build
cmake ..
make -j8 

# build analysis
cd $WORKDIR/analysis/qvector_analysis
mkdir build && cd build
cmake ..
make -j8 


#build tables directory
cd $WORKDIR
mkdir -p tables
mkdir -p tables/ICCING
mkdir -p tables/iS3D
mkdir -p tables/BQSSampler
mkdir -p tables/analytical_cooperfrye


cp -rf $WORKDIR/models/CCAKE/EoS/Houston/* tables

cp -rf $WORKDIR/models/ICCING/Input/*.dat tables/ICCING/
cp -rf $WORKDIR/models/ICCING/Input/*.txt tables/ICCING/
cp -rf $WORKDIR/models/ICCING/Greens_Function/*.txt tables/ICCING/


cp -rf $WORKDIR/models/iS3D/tables tables/iS3D
cp -rf $WORKDIR/models/iS3D/PDG tables/iS3D
cp -rf $WORKDIR/models/iS3D/deltaf_coefficients tables/iS3D

cp -rf $WORKDIR/models/BQSSampler/integration_tables/*.dat tables/BQSSampler/
cp -rf $WORKDIR/models/BQSSampler/particles/*.dat tables/BQSSampler/
cp -rf $WORKDIR/models/BQSSampler/utils/*.dat tables/BQSSampler/



cd $WORKDIR/scripts
chmod 777 *
cd $WORKDIR
